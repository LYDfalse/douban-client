{"name":"Douban-client","tagline":"Python client library for Douban APIs (OAuth 2.0)","body":"## douban-client\r\n\r\ndouban-client 是对豆瓣 API v2 接口进行了一个简单封装，主要包括了 OAuth 2.0 认证、图片上传以及接口方面的调用。\r\n\r\n目前已完成的接口有：\r\n``` \r\n* 用户 User\r\n* 广播 Miniblog\r\n* 豆邮 Doumail\r\n* 日记 Note\r\n* 相册 Album\r\n* 图片 Photo\r\n* 读书 Book\r\n* 电影 Movie\r\n* 音乐 Music\r\n* 线上活动 Online\r\n* 同城活动 Event\r\n* 论坛 Discussion\r\n* 回复 Comment\r\n```\r\n\r\n### 安装\r\n```\r\npip install douban-client\r\n```\r\n\r\n或\r\n```\r\neasy_install douban-client\r\n```\r\n\r\n### 使用说明\r\n\r\n#### OAuth 2.0 认证\r\n```\r\nfrom douban_client import DoubanClient\r\n\r\nAPI_KEY = 'your api key'\r\nAPI_SECRET = 'your api secret'\r\n\r\n# 在 OAuth 2.0 中，\r\n# 获取权限需要指定相应的 scope，请注意!!\r\nSCOPE = 'douban_basic_common,shuo_basic_r,shuo_basic_w'\r\n\r\nclient = DoubanClient(API_KEY, API_SECRET, your_redirect_uri, SCOPE)\r\n\r\n# 以下方式 2 选 1:\r\n# 1. 引导用户授权\r\nprint 'Go to the following link in your browser:' \r\nprint client.authorize_url\r\ncode = raw_input('Enter the verification code:')\r\nclient.auth_with_code(code)\r\n\r\n# 2. 如果有之前有 token，则可以\r\nclient.auth_with_token(token)\r\n\r\n# Token Code\r\ntoken_code = client.token_code\r\n\r\n# Refresh Token\r\n# 请注意：`refresh_token_code` 值仅可在授权完成时获取(即在 `auth_with_code`, `auth_with_password` 之后)\r\nrefresh_token_code = client.refresh_token_code\r\nclient.refresh_token(refresh_token_code) # refresh token\r\n\r\n```\r\n\r\n至此，已经完成 OAuth 2.0 授权。\r\n\r\n#### Douban API v2 说明\r\n```\r\n1. 豆瓣Api V2认证统一使用OAuth2\r\n2. 数据返回格式统一使用json，GData不再使用\r\n3. 需要授权的Api，需要加access_token的Header，并且使用https协议，限制具体见OAuth2文档\r\n4. 不需要授权公开api可以使用http，参数里面如果不包含apikey的话，限制单ip每分钟10次\r\n5. Api里面的通配符，:id代表纯数字， :name代表由数字+字母+[-_.]这些特殊字符\r\n6. 使用HTTP Status Code表示状态\r\n7. 列表参数使用start和count\r\n8. POST/PUT 时中文使用UTF-8编码\r\n9. 时间格式：yyyy-MM-dd HH:mm:ss, 如\"2007-06-28 11:16:11\"\r\n```\r\n\r\n#### 接口说明\r\n\r\n默认参数（参考豆瓣官方文档）:\r\n```\r\nstart: 0\r\ncount: 20\r\n```\r\n所有返回数据以豆瓣官方文档为准，各接口末尾处均有相应链接入口。\r\n\r\n\r\n__用户 User__\r\n```\r\n# 以下 id 指用户数字 id\r\n当前用户 client.user.me\r\n指定用户 client.user.get(id) \r\n搜索用户 client.user.search(q)       # q: 搜索的关键词\r\n\r\n# 此处是将广播关系接口放置到用户\r\n关注用户 client.user.follow(id)\r\n取消关注 client.user.unfollow(id)\r\n粉丝信息 client.user.followers(id, start, count)\r\n关注信息 client.user.following(id, start, count) \r\n关注关系 client.user.friendships(target_id, source_id) \r\n共同关注 client.user.follow_in_common(id, start,count) \r\n加入黑名单 client.user.block(id)\r\n```\r\n<http://developers.douban.com/wiki/?title=user_v2>\r\n\r\n<http://developers.douban.com/wiki/?title=community_1_shuo#user_info>\r\n\r\n\r\n\r\n__广播 Miniblog__\r\n```\r\n# 以下 id 指广播数字 id\r\n当前用户Timeline client.miniblog.home_timeline(count)\r\n指定用户Timeline client.miniblog.user_timeline(user_id, count)\r\n@当前用户的广播  client.miniblog.mentions(count)\r\n\r\n获取一条广播 client.miniblog.get(id)\r\n新写一条广播 client.miniblog.new(text)\r\n新写图片广播 client.miniblog.new(text, image=open('/path/pic.png'))\r\n删除一条广播 client.miniblog.delete(id)\r\n\r\n推荐网址 client.miniglog.rec(title='', url='', desc='', image='http://url.jpg')\r\n\r\n获取某广播回复列表 client.miniblog.comments(id)\r\n回复某条广播       client.miniblog.comment.new(id, text)\r\n获取某条广播回复   client.miniblog.comment.get(comment_id)\r\n删除某条广播回复   client.miniblog.comment.delete(comment_id)\r\n\r\n赞广播 client.miniblog.like(id)\r\n取消赞 client.miniblog.unlike(id)\r\n赞某广播用户列表 client.miniblog.likers(id)\r\n\r\n转发广播 client.miniblog.reshare(id)\r\n转发某广播的用户列表 client.miniblog.resharers(id)\r\n\r\n```\r\n<http://developers.douban.com/wiki/?title=community_1_shuo>\r\n\r\n\r\n\r\n__豆邮 Doumail__\r\n```\r\n# 以下 id 指豆邮数字 id\r\n# 豆邮发送过多会需要验证，请注意\r\n获取一封豆邮 client.doumail.get(id)\r\n新写一封豆邮 client.doumail.new(title, content, receiver_id)\r\n\r\n标记一封豆邮 client.doumail.read(id)\r\n批量标记豆邮 client.doumail.reads(ids) # ids 为 list\r\n\r\n删除一封豆邮 client.doumail.delete(id)\r\n批量删除豆邮 client.doumail.deletes(ids) # ids: [id, id, id]\r\n\r\n豆邮收件箱列表 client.doumail.inbox(start, count)\r\n豆邮发件箱列表 client.doumail.outbox(start, count)\r\n未读豆邮列表   client.doumail.unread(start, count)\r\n\r\n```\r\n<http://developers.douban.com/wiki/?title=doumail_v2>\r\n\r\n\r\n\r\n__日记 Note__\r\n```\r\n# 以下 id 指日记数字 id\r\n# format: html_full, html_short, abstract, text，默认为text\r\n获取一篇日记 client.note.get(id, format='text')\r\n新写一篇日记 client.note.new(title, content)\r\n更新一篇日记 client.note.update(title, content)\r\n删除一篇日记 client.note.delete(id)\r\n\r\n喜欢一篇日记     client.note.like(id)\r\n取消喜欢一篇日记 client.note.unlike(id)\r\n\r\n获取用户日记列表       client.note.list(user_id, start, count)\r\n获取用户喜欢的日记列表 client.note.liked_list(user_id, start, count)\r\n\r\n获取回复列表  client.note.comments(id, start, count)\r\n新加一条回复  client.note.comment.new(id, content)\r\n获取一条回复  client.note.comment.get(comment_id)\r\n删除一条回复  client.note.comment.delete(comment_id)\r\n\r\n```\r\n<http://developers.douban.com/wiki/?title=doumail_v2>\r\n\r\n\r\n\r\n__相册 Album__\r\n```\r\n# 以下 id 指相册数字 id\r\n# desc 描述文字\r\n获取一个相册 client.album.get(id)\r\n新建一个相册 client.album.new(title, desc)\r\n更新一个相册 client.album.update(id, title, desc)\r\n删除一个相册 client.album.delete(id)\r\n\r\n获取用户相册列表 client.album.list(user_id, start, count)\r\n用户喜欢相册列表 client.album.liked_list(user_id, start, count)\r\n获取相册图片列表 client.album.photos(id, start, count)\r\n\r\n喜欢一个相册 client.album.like(id)\r\n取消喜欢相册 client.album.unlike(id)\r\n\r\n```\r\n<http://developers.douban.com/wiki/?title=photo_v2#get_album>\r\n\r\n\r\n\r\n__图片 Photo__\r\n```\r\n# 以下 id 指图片数字 id\r\n获取一张图片 client.photo.get(id)\r\n上传一张图片 client.photo.new(album_id, image, desc) # image = open('/path/pic.png')\r\n更新图片描述 client.photo.update(id, desc)     # desc 为描述文字\r\n删除一条图片 client.photo.delete(id)\r\n\r\n喜欢一张图片 client.photo.like(id)\r\n取消喜欢图片 client.photo.unlike(id)\r\n\r\n获取回复列表  client.photo.comments(id, start, count)\r\n新加一条回复  client.photo.comment.new(id, content)\r\n获取一条回复  client.photo.comment.get(comment_id)\r\n删除一条回复  client.photo.comment.delete(comment_id)\r\n```\r\n<http://developers.douban.com/wiki/?title=photo_v2#get_photo>\r\n\r\n\r\n\r\n__读书 Book__\r\n```\r\n# 以下 id 指图书条目数字 id\r\n# q: 关键词, tag: 标签\r\n获取一本图书信息 client.book.get(id)\r\n通过isbn获取信息 client.book.isbn(isbn_number)\r\n搜索图书信息     client.book.search(q, tag, start, count) \r\n\r\n获取图书标签 client.book.tags(id)\r\n获取用户标签 client.book.tagged_list(user_id)\r\n\r\n发表一条书评 client.book.review.new(id, title, content)\r\n更新一条书评 client.book.review.update(review_id, title, content)\r\n删除一条书评 client.book.review.delete(review_id)\r\n\r\n```\r\n<http://developers.douban.com/wiki/?title=book_v2>\r\n\r\n\r\n\r\n__电影 Movie__\r\n```\r\n# 以下 id 指电影条目数字 id\r\n# q: 关键词, tag: 标签\r\n获取一部电影信息 client.movie.get(id)\r\n获取影人信息 client.movie.celebrity(celebrity_id)\r\n获取影人作品信息 client.movie.celebrity_works(celebrity_id)\r\n通过imdb获取电影 client.movie.imdb(imdb_number)\r\n搜索电影信息     client.movie.search(q, tag, start, count) \r\n\r\n获取电影标签 client.movie.tags(id)\r\n获取用户标签 client.movie.tagged_list(user_id)\r\n\r\n发表一条影评 client.movie.review.new(id, title, content)\r\n更新一条影评 client.movie.review.update(review_id, title, content)\r\n删除一条影评 client.movie.review.delete(review_id)\r\n\r\n```\r\n<http://developers.douban.com/wiki/?title=movie_v2>\r\n\r\n\r\n\r\n__音乐 Music__\r\n```\r\n# 以下 id 指音乐条目数字 id\r\n# q: 关键词, tag: 标签\r\n获取音乐信息 client.music.get(id)\r\n搜索音乐信息 client.music.search(q, tag, start, count) \r\n\r\n获取音乐标签 client.music.tags(id)\r\n获取用户标签 client.music.tagged_list(user_id)\r\n\r\n发表一条乐评 client.music.review.new(id, title, content)\r\n更新一条乐评 client.music.review.update(review_id, title, content)\r\n删除一条乐评 client.music.review.delete(review_id)\r\n\r\n```\r\n<http://developers.douban.com/wiki/?title=music_v2>\r\n\r\n\r\n\r\n__线上活动 Online__\r\n```\r\n# 以下 id 指线上活动数字 id\r\n# begin_time, end_time 格式为 '%Y-%m-%d %H:%M:%S'\r\n# cate 可选值: day, week, latest\r\n获取一条线上活动 client.online.get(id)\r\n发表一条线上活动 client.online.new(title, desc, begin_time, end_time)\r\n更新一条线上活动 client.online.update(title, desc, begin_time, end_time)\r\n删除一条线上活动 client.online.delete(id)\r\n\r\n参加一条线上活动 client.online.join(id)\r\n取消参加线上活动 client.online.quit(id)\r\n\r\n喜欢一条线上活动 client.online.like(id)\r\n取消喜欢线上活动 client.online.unlike(id)\r\n\r\n获取线上活动图片列表 client.online.photos(id, start, count)\r\n上传图片到线上活动   client.online.upload(id, image) # image = open('xxx.jpg')\r\n\r\n获取线上活动讨论列表 client.online.discussions(id, start, count)\r\n在线上活动新发讨论   client.online.discussion.new(id, title, content)\r\n\r\n获取参加线上活动成员列表 client.online.participants(id, start, count)\r\n\r\n获取线上活动列表 client.online.list(cate, start, end) \r\n获取参加过的活动 client.online.joined(user_id, start, count)\r\n获取创建过的活动 client.online.created(user_id, start, count)\r\n\r\n```\r\n<http://developers.douban.com/wiki/?title=online_v2>\r\n\r\n\r\n\r\n__同城活动 Event__\r\n```\r\n# 以下 id 指同城活动 id \r\n# q: 关键词, loc: 城市\r\n# day_type: future, week, weekend, today, tomorrow\r\n# type: all,music, film, drama, commonweal, salon, \\\r\n#       exhibition, party, sports, travel, others\r\n获取同城活动 client.event.get(id)\r\n搜索同城活动 client.event.search(q, loc, start, count)\r\n\r\n参加同城活动 client.event.join(id)\r\n取消参加活动 client.event.quit(id)\r\n\r\n对同城活动感兴趣 client.event.wish(id)\r\n取消同城活动兴趣 client.event.unwish(id)\r\n\r\n某同城活动参加者   client.event.participants(id, start, count)\r\n某同城活动感兴趣者 client.event.wishers(id, start, count)\r\n\r\n获取用户创建过的同城活动 client.event.owned(user_id, start, count)\r\n获取用户参加过的同城活动 client.event.participated(user_id, start, count)\r\n获取用户感兴趣的同城活动 client.event.wished(user_id, start, count)\r\n\r\n获取同城活动列表 client.event.list(loc, day_type, type, start, count)\r\n```\r\n<http://developers.douban.com/wiki/?title=event_v2>\r\n\r\n\r\n\r\n__论坛 Discussion__\r\n```\r\n# 以下 id 指论坛帖子 id \r\n# target 指相应产品线（如 online, review 等）\r\n# target_id 指相应产品 id\r\n获取帖子 client.discussion.get(id)\r\n发表帖子 client.discussion.new(target, target_id, title, content)\r\n更新帖子 client.discussion.update(id, title, content)\r\n删除帖子 client.discussion.delete(id)\r\n\r\n获取帖子列表 client.discussion.list(target, target_id)\r\n\r\n获取回复列表 client.discussion.comments(id, start, count)\r\n新加一条回复 client.discussion.comment.new(id, content)\r\n获取某条回复 client.discussion.comment.get(comment_id)\r\n删除某条回复 client.discussion.comment.delete(comment_id)\r\n```\r\n<http://developers.douban.com/wiki/?title=discussion_v2>\r\n\r\n\r\n已实现的接口中单元测试覆盖 90%+，如果文档中有没有说明的可以参考下： <https://github.com/liluo/douban-client/tree/master/tests>\r\n\r\n### Changelog\r\n__v0.0.5 [2013-04-26]__\r\n* 修复文档中关于授权部分的错误\r\n* 修复 `refresh_token` 错误\r\n* DoubanClient 实例对象增加 `token_code`, `refresh_token_code` 属性\r\n\r\n__v0.0.4 [2013-04-07]__\r\n* 增加 refresh token 方法\r\n\r\n__v0.0.3 [2012-10-23]__\r\n* 解决 py-oauth2 与 python-oauth2 命名冲突\r\n* 同步更新同城活动 api\r\n\r\n__v0.0.2 [2012-09-07]__\r\n* 与豆瓣官网同步，调整 people -> user\r\n* 获取创建线上活动接口变更 online.owned -> online.created\r\n* 去除已被删除的豆瓣猜接口\r\n\r\n__v0.0.1 [2012-09-06]__\r\n* 根据豆瓣 API v2 文档，发布第一个版本\r\n\r\n### 联系\r\n* 使用 douban-client 过程中遇到 bug, 可以到 [Issues](https://github.com/liluo/douban-client/issues) 反馈\r\n* 比较紧急的问题可以在 Douban 或者 Twitter @liluoliluo \r\n* 欢迎提 pull request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}